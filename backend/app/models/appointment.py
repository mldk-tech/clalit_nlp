from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, Integer, Boolean, Float, DateTime
import uuid
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
import datetime

from backend.app.models.base import Base

class Appointment(Base):
    __tablename__ = 'appointments'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    doctor_id = Column(String, nullable=False)
    summary = Column(String)
    cleaned_summary = Column(String)
    outcome_label = Column(String)
    outcome_encoded = Column(Integer)
    length = Column(Integer)
    word_count = Column(Integer)
    avg_word_length = Column(Float)
    sentence_count = Column(Integer)
    has_diabetes = Column(Boolean)
    has_hypertension = Column(Boolean)
    has_asthma = Column(Boolean)
    has_eczema = Column(Boolean)
    has_migraines = Column(Boolean)
    has_anemia = Column(Boolean)
    has_headache = Column(Boolean)
    has_abdominal_pain = Column(Boolean)
    has_back_pain = Column(Boolean)
    has_fatigue = Column(Boolean)
    has_dizziness = Column(Boolean)
    has_shortness_of_breath = Column(Boolean)
    has_cough = Column(Boolean)
    has_rash = Column(Boolean)
    has_xray = Column(Boolean)
    has_ct_scan = Column(Boolean)
    has_mri = Column(Boolean)
    has_blood_test = Column(Boolean)
    has_ecg = Column(Boolean)
    has_amoxicillin = Column(Boolean)
    has_ibuprofen = Column(Boolean)
    has_paracetamol = Column(Boolean)
    has_lisinopril = Column(Boolean)
    has_metformin = Column(Boolean)
    has_ventolin = Column(Boolean)
    has_prescription = Column(Boolean)
    has_referral = Column(Boolean)
    has_lifestyle = Column(Boolean)
    has_dietary = Column(Boolean)
    has_exercise = Column(Boolean)
    referral_cardiology = Column(Boolean)
    referral_neurology = Column(Boolean)
    referral_orthopedics = Column(Boolean)
    referral_dermatology = Column(Boolean)
    is_initial_assessment = Column(Boolean)
    is_follow_up = Column(Boolean)
    is_test_result_discussion = Column(Boolean)
    has_time_reference = Column(Boolean)
    has_followup_scheduling = Column(Boolean)
    medical_term_density = Column(Float)
    text_complexity = Column(Float)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    predictions = relationship('Prediction', back_populates='appointment') 